---
export interface Props {
  title: string;
  list_p: string[];
}
const { title, list_p } = Astro.props;
---
<style>
  .card_servicio{
    transition: transform 0.1s;
    perspective: 1000px;
  }
</style>
<div
  class="flex flex-wrap mx-auto p-4 justify-center lg:p-8 transform card_servicio"
>
  <div class="flex">
    <div
      class="relative flex flex-col items-start m-1 duration-300 ease-in-out delay-150 transform bg-gray-200 dark:bg-gray-600 shadow-2xl rounded-xl md:w-80 md:-ml-16 md:hover:bg-gray-200 md:hover:z-10 transition-all md:hover:translate-x-16 md:hover:-translate-y-8 p-4 dark:hover:bg-gray-700"
    >
      <div class="px-6 py-8">
        <h4
          class="mt-4 text-2xl font-semibold text-neutral-700 dark:text-neutral-300"
        >
          <span class="">{title}</span>
        </h4>
        <ul id="lista-servicios" class="list-disc">
          {
            list_p.map((item) => {
              return (
                <li class="mt-4 text-base font-normal text-gray-600 leading-relax dark:text-neutral-200">
                  {item}
                </li>
              );
            })
          }
        </ul>
      </div>
    </div>
  </div>
</div>
<script>
  function handleScroll() {
    const cards: NodeListOf<HTMLElement> | null =
      document.querySelectorAll(".card_servicio");
    if (cards) {
      cards.forEach((card) => {
        const cardRect = card.getBoundingClientRect();
        if (cardRect.top < 0) {       
          const rotationAngle = Math.min(90, ((-cardRect.top*2)/cardRect.height) * 90);
          (card.childNodes[1] as HTMLElement).style.transform = `translate3d(0px, ${rotationAngle / 2}px, 0px) rotateX(${rotationAngle}deg)`;
        } else {
          console.log("Sale de corregir");
          (card.childNodes[1] as HTMLElement).style.transform = `translate3d(0px, 0px, 0px) rotateX(0deg)`;
        }
      });
    }
}

window.addEventListener("scroll", handleScroll);

</script>
